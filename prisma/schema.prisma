// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Comics {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  comicName        String   @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  comicImageLink   String
  isCompleted      Boolean  @default(false)
  authorName       String
  userID           String
  comicDescription String

  comicChapters ComicChapters[]
  events        Events[]
  history       History[]
  commentsComic Comments[]
  viewCount     ViewCount[]

  comicTypesIDs String[]     @db.ObjectId
  comicTypes    ComicTypes[] @relation(fields: [comicTypesIDs], references: [id])
  // CommentComics CommentComics[]
}

model ComicChapters {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  chapterNumber Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  chapterImages ChapterImages[]
  comics        Comics          @relation(fields: [comicsId], references: [id], onDelete: Cascade)
  comicsId      String          @db.ObjectId

  commentsChapter Comments[]
  // history         History[]

  // CommentsChapter CommentsChapter[]
}

model ChapterImages {
  comicChapterID String        @db.ObjectId
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  imageLink      String
  imageNumber    Int
  comicChapter   ComicChapters @relation(fields: [comicChapterID], references: [id], onDelete: Cascade)
}

model ComicTypes {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  comicTypeName String
  comicsIDs     String[] @db.ObjectId
  comics        Comics[] @relation(fields: [comicsIDs], references: [id])
}

model Events {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  eventType     EventType
  createdAt     DateTime        @default(now())
  updateAt      DateTime        @updatedAt
  isTurnOn      Boolean         @default(true)
  userID        String          @db.ObjectId
  user          User            @relation(fields: [userID], references: [id], onDelete: Cascade)
  comics        Comics?         @relation(fields: [comicsId], references: [id], onDelete: Cascade)
  comicsId      String?         @db.ObjectId
  followLog     FollowLog[]
  comments      Comments?       @relation(fields: [commentsId], references: [id])
  commentsId    String?         @db.ObjectId
  notifications Notifications[]
}

model FollowLog {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  eventLogType EventLogType
  createdAt    DateTime     @default(now())
  // updateAt  DateTime  @updatedAt
  // isTurnOn  Boolean   @default(true)
  eventID      String       @db.ObjectId
  events       Events       @relation(fields: [eventID], references: [id], onDelete: Cascade)
}

enum EventType {
  FOLLOW
  COMMENT
}

enum EventLogType {
  FOLLOW
  UNFOLLOW
}

model History {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime @default(now())
  comicsId      String   @unique @db.ObjectId
  // comicChapterId String        @db.ObjectId
  chapterNumber Int
  userID        String   @unique @db.ObjectId
  user          User     @relation(fields: [userID], references: [id], onDelete: Cascade)
  Comics        Comics   @relation(fields: [comicsId], references: [id], onDelete: Cascade)
  // ComicChapters  ComicChapters @relation(fields: [comicChapterId], references: [id], onDelete: Cascade)
}

model ViewCount {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  comics    Comics   @relation(fields: [comicsId], references: [id], onDelete: Cascade)
  comicsId  String   @db.ObjectId
}

model Comments {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  content        String
  commentReplies Comments[] @relation("CommentCommentReplies")
  commentReplyId String?    @db.ObjectId
  commentReply   Comments?  @relation("CommentCommentReplies", fields: [commentReplyId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userID         String     @db.ObjectId
  user           User       @relation("UserComment", fields: [userID], references: [id], onDelete: Cascade)
  createdAt      DateTime   @default(now())
  updateAt       DateTime   @updatedAt

  comics          Comics?        @relation(fields: [comicsId], references: [id], onDelete: Cascade)
  comicsId        String?        @db.ObjectId
  comicChapters   ComicChapters? @relation(fields: [comicChaptersId], references: [id], onDelete: Cascade)
  comicChaptersId String?        @db.ObjectId

  events             Events[]
  notificationsActor Notifications[]
  userLikes          User[]          @relation("UserLike", fields: [userLikesId], references: [id])
  userLikesId        String[]        @db.ObjectId
}

enum Role {
  ADMIN
  MEMBER
}

model User {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  role     Role   @default(MEMBER)
  userId   String @unique
  name     String
  imageUrl String
  email    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  comments       Comments[] @relation("UserComment")
  events         Events[]
  history        History[]
  likeCommentsId String[]   @db.ObjectId
  likeComments   Comments[] @relation("UserLike", fields: [likeCommentsId], references: [id])
}

model Notifications {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  isRead               Boolean            @default(false)
  commentActor         Comments?          @relation(fields: [commentsActorId], references: [id], onDelete: Cascade)
  commentsActorId      String?            @db.ObjectId
  events               Events             @relation(fields: [eventsId], references: [id], onDelete: Cascade)
  eventsId             String             @db.ObjectId
  entityNotification   EntityNotification @relation(fields: [entityNotificationId], references: [id])
  entityNotificationId String             @db.ObjectId
}

model EntityNotification {
  id            String                  @id @default(auto()) @map("_id") @db.ObjectId
  entityTypes   EntityNotificationTypes
  entityContent String
  notifications Notifications[]
}

enum EntityNotificationTypes {
  COMMENT
}
